import sqlite3
import warnings

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('seaborn-v0_8')
sns.set_palette("pastel")


class TitanicVisualizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö Titanic"""

    def __init__(self, db_path: str = 'titanic.db'):
        self.db_path = db_path
        self.connection = sqlite3.connect(db_path)

    def __del__(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        if hasattr(self, 'connection') and self.connection:
            self.connection.close()

    def execute_query(self, query: str) -> pd.DataFrame:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç DataFrame"""
        return pd.read_sql_query(query, self.connection)

    def plot_survival_by_class(self, figsize: tuple = (10, 6)):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º"""
        query = """
        SELECT 
            Pclass,
            Survived,
            COUNT(*) as Count
        FROM passengers 
        GROUP BY Pclass, Survived
        """

        df = self.execute_query(query)
        pivot_df = df.pivot(index='Pclass', columns='Survived', values='Count')
        pivot_df.columns = ['–ü–æ–≥–∏–±', '–í—ã–∂–∏–ª']

        fig, ax = plt.subplots(figsize=figsize)
        pivot_df.plot(kind='bar', ax=ax, color=['#ff6b6b', '#51cf66'])

        ax.set_title('–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º', fontsize=16, fontweight='bold')
        ax.set_xlabel('–ö–ª–∞—Å—Å', fontsize=12)
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤', fontsize=12)
        ax.legend(title='–°—Ç–∞—Ç—É—Å')
        ax.grid(axis='y', alpha=0.3)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, (idx, row) in enumerate(pivot_df.iterrows()):
            total = row.sum()
            for j, value in enumerate(row):
                percentage = (value / total) * 100
                ax.text(i + j * 0.3 - 0.15, value + 5, f'{percentage:.1f}%',
                        ha='center', fontweight='bold')

        plt.xticks(rotation=0)
        plt.tight_layout()
        plt.show()

    def plot_survival_rate_by_gender_class(self, figsize: tuple = (10, 6)):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—É –∏ –∫–ª–∞—Å—Å—É"""
        query = """
        SELECT 
            Sex,
            Pclass,
            ROUND(SUM(Survived) * 100.0 / COUNT(*), 2) as SurvivalRate
        FROM passengers 
        GROUP BY Sex, Pclass 
        ORDER BY Sex, Pclass
        """

        df = self.execute_query(query)

        fig, ax = plt.subplots(figsize=figsize)

        x = np.arange(len(df['Pclass'].unique()))
        width = 0.35

        men = df[df['Sex'] == 'male']
        women = df[df['Sex'] == 'female']

        bars1 = ax.bar(x - width / 2, men['SurvivalRate'], width, label='–ú—É–∂—á–∏–Ω—ã', alpha=0.8)
        bars2 = ax.bar(x + width / 2, women['SurvivalRate'], width, label='–ñ–µ–Ω—â–∏–Ω—ã', alpha=0.8)

        ax.set_title('–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—É –∏ –∫–ª–∞—Å—Å—É', fontsize=16, fontweight='bold')
        ax.set_xlabel('–ö–ª–∞—Å—Å', fontsize=12)
        ax.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∂–∏–≤—à–∏—Ö (%)', fontsize=12)
        ax.set_xticks(x)
        ax.set_xticklabels(['1 –∫–ª–∞—Å—Å', '2 –∫–ª–∞—Å—Å', '3 –∫–ª–∞—Å—Å'])
        ax.legend()
        ax.grid(axis='y', alpha=0.3)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar in bars1 + bars2:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width() / 2., height + 1,
                    f'{height:.1f}%', ha='center', va='bottom', fontweight='bold')

        plt.tight_layout()
        plt.show()

    def plot_age_distribution(self, figsize: tuple = (12, 6)):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤—ã–∂–∏–≤—à–∏—Ö –∏ –ø–æ–≥–∏–±—à–∏—Ö"""
        query = """
        SELECT Age, Survived 
        FROM passengers 
        WHERE Age IS NOT NULL
        """

        df = self.execute_query(query)
        df['Survived'] = df['Survived'].map({0: '–ü–æ–≥–∏–±', 1: '–í—ã–∂–∏–ª'})

        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
        for survival_status in ['–í—ã–∂–∏–ª', '–ü–æ–≥–∏–±']:
            data = df[df['Survived'] == survival_status]['Age']
            ax1.hist(data, bins=30, alpha=0.7, label=survival_status, density=True)

        ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞', fontsize=14, fontweight='bold')
        ax1.set_xlabel('–í–æ–∑—Ä–∞—Å—Ç', fontsize=12)
        ax1.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å', fontsize=12)
        ax1.legend()
        ax1.grid(alpha=0.3)

        # Boxplot
        sns.boxplot(data=df, x='Survived', y='Age', ax=ax2)
        ax2.set_title('–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É', fontsize=14, fontweight='bold')
        ax2.set_xlabel('–°—Ç–∞—Ç—É—Å', fontsize=12)
        ax2.set_ylabel('–í–æ–∑—Ä–∞—Å—Ç', fontsize=12)

        plt.tight_layout()
        plt.show()

    def plot_fare_distribution(self, figsize: tuple = (12, 5)):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤"""
        query = "SELECT Fare, Pclass FROM passengers WHERE Fare > 0"

        df = self.execute_query(query)

        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
        ax1.hist(df['Fare'], bins=50, alpha=0.7, color='skyblue', edgecolor='black')
        ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤', fontsize=14, fontweight='bold')
        ax1.set_xlabel('–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ ($)', fontsize=12)
        ax1.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞', fontsize=12)
        ax1.grid(alpha=0.3)

        # Boxplot –ø–æ –∫–ª–∞—Å—Å–∞–º
        sns.boxplot(data=df, x='Pclass', y='Fare', ax=ax2)
        ax2.set_title('–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º', fontsize=14, fontweight='bold')
        ax2.set_xlabel('–ö–ª–∞—Å—Å', fontsize=12)
        ax2.set_ylabel('–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ ($)', fontsize=12)
        ax2.set_yscale('log')

        plt.tight_layout()
        plt.show()

    def plot_correlation_heatmap(self, figsize: tuple = (10, 8)):
        """–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        query = "SELECT Survived, Pclass, Age, Fare FROM passengers"

        df = self.execute_query(query)
        correlation_matrix = df.corr()

        fig, ax = plt.subplots(figsize=figsize)

        mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))
        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0,
                    square=True, mask=mask, ax=ax, fmt='.2f')

        ax.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤', fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.show()

    def create_dashboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π dashboard —Å –≤—Å–µ–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
        print("üö¢ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö Titanic - Dashboard\n")
        print("=" * 50)

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        query_total = "SELECT COUNT(*) as total FROM passengers"
        total_passengers = self.execute_query(query_total).iloc[0]['total']

        query_survived = "SELECT SUM(Survived) as survived FROM passengers"
        survived = self.execute_query(query_survived).iloc[0]['survived']

        print(f"–í—Å–µ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: {total_passengers}")
        print(f"–í—ã–∂–∏–ª–æ: {survived} ({survived / total_passengers * 100:.1f}%)")
        print("=" * 50)

        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏
        self.plot_survival_by_class()
        self.plot_survival_rate_by_gender_class()
        self.plot_age_distribution()
        self.plot_fare_distribution()
        self.plot_correlation_heatmap()
